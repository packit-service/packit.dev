<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation on Packit</title>
    <link>https://packit.dev/docs/</link>
    <description>Recent content in Documentation on Packit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://packit.dev/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Actions</title>
      <link>https://packit.dev/docs/actions/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://packit.dev/docs/actions/</guid>
      <description>You can probably find yourself in a situation where some part of the packit workflow needs to be tweaked for your package.
Packit supports actions, a way to change default implementation for a command of your choice. Packit is able to execute more commands. Each action can accept a list of commands. By default, the commands are executed directly and not in a shell - if you need shell, just wrap your command like this: bash -c &amp;quot;my fancy $command | grep success&amp;quot;.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://packit.dev/docs/architecture/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://packit.dev/docs/architecture/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Packit Guide</title>
      <link>https://packit.dev/docs/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://packit.dev/docs/guide/</guid>
      <description>Agenda Being fully on-board of the packit train may take some time and effort. This is why we decided to split the on-boarding process into multiple checkpoints:
 Have packit tooling installed locally. RPM builds pass on your laptop. You are approved to use packit-service. The project has successful builds inside the service. Packit service handles Fedora Rawhide updates for you.  The guide We welcome all the suggestions to this guide, feel free to open a new issue here.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://packit.dev/docs/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://packit.dev/docs/configuration/</guid>
      <description>Packit uses a configuration file in the upstream repository. The config file is written in YAML language.
You should place the file in the root of your upstream repo. Packit accepts these names:
 .packit.yaml .packit.yml .packit.json packit.yaml packit.yml packit.json  Both Packit-as-a-Service and packit tool use this configuration file.
Top level keys    Key name Type Description     specfile_path string relative path to a spec file within the upstream repository (mandatory)   upstream_project_name string name of the upstream repository (e.</description>
    </item>
    
    <item>
      <title>How to source-git?</title>
      <link>https://packit.dev/docs/how-to-source-git/</link>
      <pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://packit.dev/docs/how-to-source-git/</guid>
      <description>This is a practical introduction to source-git using a real example.
If you are interested in the theory behind source-git, please read the specification.
Let&amp;rsquo;s create a source-git repo I choose systemd from Fedora 29 for this example.
What do we need? 3 things:
 Systemd upstream repo. Fedora 29 dist-git repo of systemd. New local git repo.  Let&amp;rsquo;s set all of this up. We&amp;rsquo;ll start with an empty git repository:</description>
    </item>
    
  </channel>
</rss>